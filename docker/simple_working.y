#!python
print("Importing Tensorflow...")

from signal import signal
import tensorflow as tf
import numpy as np

import collections
import random

print("----------------------------------------")
print("TensorFlow version:", tf.__version__)
tf.constant(0) # get rid of the initial warning
print("----------------------------------------")


inputs = [
    [0.61240741,     0.626005314,  0.687578051,   0.962439246,  0.145408965,  0.262854227],
    [0.662686331,    0.177907002,  0.21306371,    0.573118231,  0.781678858,  0.861142274],
    [0.910527168,    0.00804182,   0.932976846,   0.386426136,  0.345039878,  0.010375201],
    [0.628617787,    0.278831628,  0.109121978,   0.634102285,  0.029730106,  0.771104599],
    [0.730970911,    0.550443909,  0.222568828,   0.529089152,  0.294747919,  0.365906964],
    [0.282928636,    0.624505567,  0.714601472,   0.982873615,  0.747534608,  0.594591403],
    [0.508556102,    0.764540857,  0.472995805,   0.369882944,  0.852743404,  0.220665336],
    [0.60249286,     0.882589272,  0.261283952,   0.586151635,  0.040268717,  0.243332497],
    [0.090547762,    0.712370144,  0.561269966,   0.990549372,  0.690748183,  0.077802267],
    [0.085608727,    0.877134608,  0.738370701,   0.309063588,  0.274817417,  0.852483737],
    [0.111590154,    0.245182687,  0.034504048,   0.720204489,  0.896176523,  0.327078957],
    [0.193341449,    0.025733773,  0.366116243,   0.440584869,  0.294719605,  0.926372716],
    [0.218772262,    0.757970527,  0.607478308,   0.97314846,   0.683076263,  0.381330856],
    [0.03357944,     0.193030773,  0.824977803,   0.260984252,  0.36600778,   0.034576569],
    [0.082125922,    0.391048244,  0.21353999,    0.242262461,  0.768126901,  0.579208642],
    [0.470566739,    0.705079357,  0.240407124,   0.625836863,  0.727215135,  0.331251924],
    [0.785086097,    0.81507267,   0.161033262,   0.985539923,  0.446964887,  0.050009382],
    [0.537115336,    0.011672745,  0.89807149,    0.259767695,  0.401390687,  0.26769817],
    [0.880292633,    0.09903002,   0.941118342,   0.947854414,  0.333618843,  0.387913599],
    [0.187619829,    0.085059929,  0.056944256,   0.000576548,  0.239388901,  0.545148881],
    [0.570694638,    0.873796058,  0.979230558,   0.083338473,  0.852082292,  0.680881347],
    [0.602576452,    0.213909665,  0.833891836,   0.928760793,  0.499084299,  0.503893529],
    [0.009432601,    0.410339625,  0.884867713,   0.033142064,  0.998744558,  0.836202156],
    [0.759866137,    0.003457165,  0.207390355,   0.914083123,  0.098528845,  0.152168218],
    [0.329998852,    0.006277801,  0.332895798,   0.141449393,  0.858117949,  0.701797693],
    [0.49097585,     0.283980024,  0.525661253,   0.574437456,  0.448518728,  0.461208318],
    [0.766954168,    0.932679499,  0.915232694,   0.795852807,  0.30174808,   0.356688789],
    [0.804519084,    0.489266111,  0.423411464,   0.948405093,  0.784908415,  0.848615806],
    [0.869626047,    0.897901504,  0.25841664,    0.353406259,  0.257693339,  0.355787908],
    [0.897131985,    0.345530755,  0.059079479,   0.750931393,  0.961910891,  0.540056614],
    [0.866414439,    0.554188582,  0.200925301,   0.485755439,  0.952546208,  0.930893298],
    [0.130090892,    0.636617639,  0.783236274,   0.199333238,  0.991326846,  0.158001168],
    [0.104041407,    0.847408089,  0.073298866,   0.65477825,   0.657115247,  0.625643957],
    [0.915551638,    0.58062422,   0.300100013,   0.889886251,  0.67758134,   0.682470518],
    [0.246415008,    0.739181082,  0.432619495,   0.524042262,  0.895506723,  0.424927065],
    [0.989151907,    0.523939592,  0.590497715,   0.191913045,  0.830257856,  0.972484055]
]


input_tensors = [tf.constant(v) for v in inputs]
input_np = np.array(inputs)

print(input_tensors[0].get_shape())

outputs = [
    [0.619206362, 1.650017297, 0.204131596],
    [0.420296666, 0.786181941, 0.821410566],
    [0.459284494, 1.319402982, 0.177707539],
    [0.453724707, 0.743224263, 0.400417352],
    [0.64070741,  0.751657979, 0.330327441],
    [0.453717102, 1.697475087, 0.671063005],
    [0.63654848,  0.842878749, 0.53670437],
    [0.742541066, 0.847435587, 0.141800607],
    [0.401458953, 1.551819339, 0.384275225],
    [0.481371667, 1.047434289, 0.563650577],
    [0.178386421, 0.754708537, 0.61162774],
    [0.109537611, 0.806701111, 0.610546161],
    [0.488371394, 1.580626769, 0.53220356],
    [0.113305107, 1.085962055, 0.200292175],
    [0.236587083, 0.455802452, 0.673667772],
    [0.587823048, 0.866243988, 0.529233529],
    [0.800079383, 1.146573186, 0.248487134],
    [0.27439404,  1.157839185, 0.334544429],
    [0.489661326, 1.888972755, 0.360766221],
    [0.136339879, 0.057520804, 0.392268891],
    [0.722245348, 1.062569031, 0.766481819],
    [0.408243059, 1.76265263,  0.501488914],
    [0.209886113, 0.918009777, 0.917473357],
    [0.381661651, 1.121473478, 0.125348531],
    [0.168138327, 0.474345191, 0.779957821],
    [0.387477937, 1.10009871,  0.454863523],
    [0.849816834, 1.7110855,   0.329218435],
    [0.646892598, 1.371816557, 0.816762111],
    [0.883763775, 0.611822899, 0.306740623],
    [0.62133137,  0.810010872, 0.750983753],
    [0.710301511, 0.68668074,  0.941719753],
    [0.383354265, 0.982569512, 0.574664007],
    [0.475724748, 0.728077116, 0.641379602],
    [0.748087929, 1.189986264, 0.680025929],
    [0.492798045, 0.956661758, 0.660216894],
    [0.756545749, 0.78241076,  0.901370956]
]

output_tensors = [tf.constant(v) for v in outputs]
output_np = np.array(outputs)

train_data = tf.data.Dataset.from_tensor_slices((inputs, outputs))

print(train_data.take(1))


# Create a sequential model (no idea if this is the correct one)
model = tf.keras.models.Sequential([
  tf.keras.layers.InputLayer(input_shape=(len(inputs[0]),)),
#   tf.keras.layers.Dense(name="inner", units=len(inputs[1])*2, activation='relu'),
  tf.keras.layers.Dense(name="outputs", units=len(outputs[1]), activation='softmax')
])

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
#model.fit(train_data, epochs=5)
# model.fit([inputs[0], inputs[1]], [outputs[0], outputs[1]], epochs=5)
model.fit(inputs, outputs, epochs=5)

print('---------- model information -----------')
print(model.summary())
